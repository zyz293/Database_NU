import MySQLdbimport datetimeclass CaesarSys:	'''Simple Caesar-like interactive system.'''	def __init__(self):		''' Connect with MySQL'''		self.db = MySQLdb.connect(				host = 'localhost',				user = 'root',				passwd = 'zoe19920612',				db = 'project3-nudb'				)		self.cursor = self.db.cursor()		self.loggedIn = False		self.Login()	def Login(self):		''' Check login '''		if self.loggedIn == False:			usr = raw_input("Enter sid: ")			pwd = raw_input("Enter password: ")			self.cursor.execute('select Id, password from student')			result = self.cursor.fetchall()			temp = [];			for ele in result:				a = list(ele)				a[0] = int(a[0])				temp.append(a)			result = temp			if [int(usr),pwd] in result:				print 'Login successful.'				self.username = usr				# get student id				self.cursor.execute("select Id, name from student where Id = '"+str(usr)+"'")				result = self.cursor.fetchall()				self.id = int(result[0][0]) # student id				self.loggedIn = True				self.StudentMenu()			else:				print 'ERROR: Incorrect username and/or password!'				self.Login()		else:			print 'STATUS: You are already logged in.'	def StudentMenu(self):		'''Display main menu.'''		if self.loggedIn == True:			now = datetime.datetime.now()			year = now.year			month = now.month			if month in (9, 10,11,12):				quarter = 'Q1'			elif month in (1,2,3):				quarter = 'Q2'			elif month in (4,5,6):				quarter = 'Q3'			else:				quarter = 'Q4'			self.Watch = [year, quarter]			queryFindCourses = "select UoScode from transcript where studId ="+str(self.id)+" and semester ='"+quarter+"' and year = "+str(year)+" and grade is null"			self.cursor.execute(queryFindCourses) # query to find currently taking courses			courses = self.cursor.fetchall()			print '---------Main Menu-----------'			if len(courses) != 0:				print 'You are taking the following courses this quarter: '				for course in courses:					print str(course[0])			print '---------Menu Options-----------'			print '1. Transcript'			print '2. Enroll'			print '3. Withdraw'			print '4. Personal Details'			print '5. Log out'			print '---------End Main Menu-----------'			choice = raw_input('Enter Menu selection (number only): ')			if choice == str(1):				self.ShowTranscript()			elif choice == str(2):				self.Enroll()			elif choice == str(3):				self.Withdraw()			elif choice == str(4):				self.PersonalDetails()			elif choice == str(5):				self.Logout()			else:				print 'ERROR: Illegal option!'				self.StudentMenu()		else:			print 'WARNING: You are not logged in yet. Please log in first.'			self.Login()		def ShowTranscript(self):		if self.loggedIn == True:			print '---------Transcript-----------'			queryShowTranscript = "select UoSCode, Semester, Year,Grade from transcript where studId ="+str(self.id)			self.cursor.execute(queryShowTranscript)			BasicTranscript = self.cursor.fetchall()			for course in BasicTranscript:				print course 			print '---------Transcript Options-----------'			print 'Enter course number to see course detail, or'			print '1. Return to Student Menu'			print '---------End Transcript Menu-----------'			choice = raw_input('Enter Transcript selection (1 or course number): ')			if choice == str(1):				self.StudentMenu()			else: # see transcript details				cid = choice 				queryShowCourseDetail = "select t.UoSCode, us.UoSName, t.year, t.semester, uo.Enrollment, uo.MaxEnrollment, f.name,t.grade from unitofstudy us, transcript t, uosoffering uo, faculty f where t.studid = "+str(self.id)+" and t.uoscode = '"+str(cid)+"' and t.UoSCode = us.UoSCode and uo.UoSCode = t.UoSCode and t.year = uo.year and t.semester = uo.semester and uo.InstructorId = f.id"				# print queryShowCourseDetail				self.cursor.execute(queryShowCourseDetail)				CourseDetail = self.cursor.fetchall()				#### MODIFY result type. Change long to int. Add label				print 'Course Details:'				print CourseDetail				self.ShowTranscript()		else:			print 'WARNING: You are not logged in yet. Please log in first.'			self.Login()		pass 			def Enroll(self):		currentQuarter = self.Watch		if currentQuarter[1] == 'Q1':			nextQuarter = [currentQuarter[0]+1, 'Q2']		elif currentQuarter[1] == 'Q2':			nextQuarter = [currentQuarter[0], 'Q3']		elif currentQuarter[1] == 'Q3':			nextQuarter = [currentQuarter[0], 'Q4']		elif currentQuarter[1] == 'Q4':			nextQuarter = [currentQuarter[0], 'Q1']		CourseOffering = 'select UoSCode from uosoffering u where (u.year =' +str(currentQuarter[0]) + ' and u.Semester = "' + str(currentQuarter[1]) +'") or ( u.year = ' + str(nextQuarter[0]) + ' and u.Semester ="' + str(nextQuarter[1]) +'")'		#print nextQuarter		#print CourseOffering		self.cursor.execute(CourseOffering)		offerredCourse = self.cursor.fetchall()		temp = []		for ele in offerredCourse:			temp.append(ele[0])		offerredCourse = temp		print "Course offered this quarter and next quarter:"		print offerredCourse		opt = raw_input("Please select the course you want to enroll(enter 1 to Main Manu):")		if opt == '1':			self.StudentMenu()		else:			if opt not in offerredCourse:				print "Error: Invalid course number"				self.Enroll()			else: # valid course number				call_command ='CALL enroll_try("' +opt +'",' +str(currentQuarter[0])+',"'+str(currentQuarter[1])+'",'+str(self.id)+','+str(nextQuarter[0])+',"'+str(nextQuarter[1])+'")'				self.cursor.execute(call_command)				needCourse = self.cursor.fetchall()				#self.db.commit()				#print needCourse				if needCourse == ():					print "=========== Course has been successfully added! ========="					self.db.commit()					self.Enroll()				else:					print "You have not met the course prerequisites as following"					print needCourse					self.cursor.close()					self.cursor = self.db.cursor()					self.Enroll()		def Withdraw(self):		drop_list = 'select tt.UoSCode from transcript tt where tt.grade is NULL and StudId = "' + str(self.id) + '"'		self.cursor.execute(drop_list)		drop_courses = self.cursor.fetchall()		print "You can drop the following courses:"		print drop_courses		temp = []		for ele in drop_courses:			temp.append(ele[0])		opt1 = raw_input('Drop(enter 0 to go back to Main Menu)')		dropL = temp		if opt1 == '0':			self.StudentMenu()		else:			if opt1 not in dropL:				print "Invalid course number"				self.Withdraw()			else:#start to drop course				self.cursor.execute('CALL withdraw_try("'+str(self.id)+'","'+str(opt1)+'")')				print "The selected course has been dropped"				self.db.commit()				command1 = 'select * from student where Id= "-1"'				self.cursor.execute(command1)				fetch = self.cursor.fetchall()				if fetch != ():					print "=======Warining: the enrollment rate of this course is below 50% !!!!=========="					command2 = 'delete from student where Id= "-1"'					self.cursor.execute(command2)					self.db.commit()				self.Withdraw()		self.StudentMenu()			def PersonalDetails(self):		'''Show personal record'''		if self.loggedIn == True:			print '---------Personal Details-----------'			queryPersonal = "select * from student where id = "+str(self.id)			print 'Student ID; Name; Address'			self.cursor.execute(queryPersonal)			PersonInfo = self.cursor.fetchall()[0]			## MODIFY. Label the elements			print PersonInfo			print '---------Personal Details Options-----------'			print '1. Change password'			print '2. Change address'			print '3. Return to Student Menu'			print '---------End Personal Details Menu-----------'				choice = raw_input('Enter Menu selection (number only): ')			if choice == str(1):				opwd = raw_input('Old password: ')				if opwd == PersonInfo[2]:					npwd = raw_input('New password: ')					nnpwd = raw_input('Repeat new password: ')					if nnpwd != npwd:						print 'ERROR: New password does not match!'						self.PersonalDetails()					elif nnpwd == npwd:						queryUpdatePwd = "update student set Password = '"+str(nnpwd)+"' where id ="+str(self.id)						self.cursor.execute(queryUpdatePwd)						print 'New password has been successfully updated.'							self.PersonalDetails()										else:					print 'ERROR: Password incorrect!'					self.PersonalDetails()			elif choice == str(2):				naddr = raw_input('Enter new address: ')				queryUpdateAddr = "update student set Address = '"+str(naddr)+"' where id ="+str(self.id)				self.cursor.execute(queryUpdateAddr)				print 'New address has been successfully updated.'				self.PersonalDetails()				elif choice == str(3):				self.StudentMenu()			else:				print 'ERROR: Illegal option!'				self.PersonalDetails()					else:			print 'WARNING: You are not logged in yet. Please log in first.'			self.Login()					def Logout(self):		if self.loggedIn == False:			print 'WARNING: You are not logged in yet.'			self.Login()		else:			print 'You have logged out of the system. Enter your credentials to log in again.'			self.loggedIn = False			self.Login()